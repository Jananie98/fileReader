/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package commissiondistributor;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author it232108
 */
public class GUI extends javax.swing.JFrame {

    private static Statement stmt, stmt2, stmt3, stmt4;
    Connection con = null;
    String ip = null;
    String library = null;
    String absoluteFilePath = "";
    ResultSet urs, brch;

    /**
     * Creates new form GUI
     */
    public GUI() {
        try {
            String workingDirectory = System.getProperty("user.dir");
            new File(workingDirectory + "\\log").mkdir();
            absoluteFilePath = workingDirectory + File.separator + "config.properties";
            Properties prop = new Properties();
            prop.load(new FileInputStream(absoluteFilePath));
            ip = prop.getProperty("ip");
            library = prop.getProperty("library");
            try {
                Class.forName("com.ibm.as400.access.AS400JDBCDriver").newInstance();
                con = DriverManager.getConnection("jdbc:as400://" + ip + ";libraries=" + library, "", "");
                //con = DriverManager.getConnection("jdbc:as400://" + ip + ";libraries=" + library, "IT203836CH", "IT203836CH");
                //con = DriverManager.getConnection("jdbc:as400://172.21.12.100;libraries=bocproddta", "sg203836", "sg203836");
                //   con = DriverManager.getConnection("jdbc:as400://172.20.12.100;libraries=bocproddta", "icbsmig", "icbsmig");

                con.setAutoCommit(false);

                initComponents();

            } catch (Exception ex) {
                ex.printStackTrace();
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(0);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        lblAlert = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\"));
            jFileChooser1.setDialogTitle("");
            jFileChooser1.setEnabled(false);
            jFileChooser1.addComponentListener(new java.awt.event.ComponentAdapter() {
                public void componentHidden(java.awt.event.ComponentEvent evt) {
                    jFileChooser1ComponentHidden(evt);
                }
            });
            jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jFileChooser1ActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addComponent(lblAlert, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(22, Short.MAX_VALUE)
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblAlert, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(46, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        System.out.println(evt.getActionCommand());
        if(evt.getActionCommand().equals("CancelSelection")){
            System.exit(0);
        }
        int headerDataId = 0;
        boolean dup = false;
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH.mm.ss");//2021-04-01-00.00.00.000000
        Date date = new Date();
        String file_to = dateFormat.format(date) + ".txt";
        //System.out.println(file_to);
        File file = new File(jFileChooser1.getSelectedFile().getAbsolutePath());
        //File file = new File("C:\\Users\\BOC\\Desktop\\INWORD\\a.dat");

        ArrayList<String[]> comdisRecords = new ArrayList<String[]>();

        if (!file.exists()) {
            lblAlert.setForeground(Color.red);
            lblAlert.setText(file.getName() + " does not exists.");
            return;
        }
        if (!(file.isFile() && file.canRead())) {
            lblAlert.setForeground(Color.red);
            lblAlert.setText(file.getName() + " not in a readable form.");
            return;
        }

        PrintWriter writer = null;
        try {
            stmt = con.createStatement();
            stmt2 = con.createStatement();
            stmt3 = con.createStatement();
            stmt4 = con.createStatement();

            urs = stmt2.executeQuery("values(USER)");

            urs.next();
            String username = urs.getString(1);

            brch = stmt3.executeQuery("SELECT SCBRN FROM scp9006 WHERE SCUSER = '" + username + "' and SCBK = 1");
            brch.next();
            String branch = brch.getString(1);
            //String branch = "003";

            FileInputStream fis = new FileInputStream(file);
            XSSFWorkbook wb = new XSSFWorkbook(fis);
            XSSFSheet sheet = wb.getSheetAt(0);     //creating a Sheet object to retrieve object  
            Iterator<Row> itr = sheet.iterator();    //iterating over excel file  
            //itr.next();

            double creditTotal = 0.00;
            double debitTotal = 0.00;
            int subseq = 0;
            String[] comdis = null;

            while (itr.hasNext()) {
                comdis = new String[18];
                Row row = itr.next();

                System.out.println(row.getCell(2));
                //System.out.println(row.getCell(1));
                Iterator<Cell> cellIterator = row.cellIterator();   //iterating over each column  
                int cellCount = 0;

                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    comdis[cellCount] = " ";
                    System.out.println(comdis[cellCount]);
                    switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_STRING:
                            comdis[cellCount] = cell.getStringCellValue();
                            System.out.println(comdis[cellCount]);
                            break;
                        case Cell.CELL_TYPE_NUMERIC:
                            //if (cellCount == 6) {
                            //    comdis[cellCount] = String.valueOf(String.format("%.02f", cell.getNumericCellValue()));
                            //} else {
                            comdis[cellCount] = String.valueOf(String.format("%.0f", cell.getNumericCellValue()));
                            //}
                            System.out.println("num "+comdis[cellCount]);
                            break;
                        default:
                    }
                    cellCount++;
                }

                cellCount = 0;
                comdisRecords.add(comdis);
                //System.out.println(neft[9]);
                System.out.println("done");
            }

            String sql1 = "select max(CDISID) from EBAT00101";
            ResultSet m_ResultSet = stmt.executeQuery(sql1);
            m_ResultSet.next();
            headerDataId = m_ResultSet.getInt(1) + 1;
            String desc2 = "";
            
            

            for (int i = 0; i < comdisRecords.size(); i++) {

                subseq += 1;

                 String StAmount;
                 NumberFormat formttl = new DecimalFormat("#0.00");
                 StAmount = formttl.format(debitTotal); 
                 

                String sqlDetail = "insert into EBAT00101 (CDISID,CDISRECNO,CDISACCNO,CDISCC,CDISCODE,CDISAMT,CDISNO,CDISDES1,CDISDES2,CDISDES3,CDISAPPCD,PSTS,PSTDATE) "
                        + "values(  " + headerDataId + "," + subseq + " ," + comdisRecords.get(i)[0] + "," + comdisRecords.get(i)[1] + "," + Integer.parseInt(comdisRecords.get(i)[2]) + "," + Double.parseDouble(comdisRecords.get(i)[3])/100 + "," + comdisRecords.get(i)[4] + ",'" + comdisRecords.get(i)[5] + "','" + desc2 + "','" + comdisRecords.get(i)[7] + "'," + comdisRecords.get(i)[8] + ",'A','')";

                System.out.println((comdisRecords.get(i)[2]));
                System.out.println(sqlDetail);
                

                if (comdisRecords.get(i)[2].equals("10")) {
                    creditTotal += Double.parseDouble(comdisRecords.get(i)[3])/100;
                } else if (comdisRecords.get(i)[2].equals("81")) {
                    debitTotal += Double.parseDouble(comdisRecords.get(i)[3])/100;
                }
 
                if (comdisRecords.get(i)[8].equals("40")) {
                    try {
                    stmt.executeUpdate(sqlDetail);

                } catch (SQLException ex) {
                    ex.printStackTrace();
                    lblAlert.setForeground(Color.red);
                    lblAlert.setText("Could not upload the file");
                    return;
                }
                } else {
                    con.rollback();
                    lblAlert.setForeground(Color.red);
                    lblAlert.setText("CASA Account record Found. Please upload valid data");
                    return;
                }
                  
            }
 
            String StAmountcr;
            NumberFormat form = new DecimalFormat("#0.00");
            StAmountcr = form.format(creditTotal);
            
            String StAmountdr;
            NumberFormat form2 = new DecimalFormat("#0.00");
            StAmountdr = form2.format(debitTotal);
            
            String fileName;
            fileName = file.getName();
            String existingFileName;
            String sql2 = "select CDISFNME from EBAT00202 where CDISFNME = '" + fileName +"'";
            System.out.println(sql2);
            ResultSet fnameResults = stmt4.executeQuery(sql2);
            
            if(fnameResults.next()){
                // results set not empty
                // duplicate file name is found
                    con.rollback();
                    lblAlert.setForeground(Color.red);
                    lblAlert.setText("File Duplicated");
                    return;  
            }
            
            String sqlHeader = "insert into EBAT00202 (CDISID1,CDISCRTTL,CDIDDRTTL,CDISUSR,CDISBRN, CDISFNME, CDISDTS,CDISAPPUSR,CDISAPDTS,CDISFSTS)"
                    + "values (" + headerDataId + "," + StAmountcr + "," + StAmountdr + ",'" + username + "'," + branch + ",'" + fileName + "', '" + dateFormat.format(date) + "' , '', '0001-01-01-00.00.00','C')";
            
            System.out.println(sqlHeader);
            
            

            try {
                stmt2.executeUpdate(sqlHeader);
                if (StAmountcr == null ? StAmountdr == null : StAmountcr.equals(StAmountdr)) {
                    lblAlert.setForeground(Color.green);
                    lblAlert.setText("File Uploaded Successfully...!");
                    con.commit();
                    // button disable
                } else {
                    con.rollback();
                    lblAlert.setForeground(Color.red);
                    lblAlert.setText("Debit Credit Mismatch found");
                    return;
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                lblAlert.setForeground(Color.red);
                lblAlert.setText("File not uploaded");
                return;
            }

        } catch (IOException ex) {
//            con.rollback();
            lblAlert.setForeground(Color.red);
            lblAlert.setText(ex.getMessage());
            ex.printStackTrace();
        } catch (SQLException ex) {
            //con.rollback();
            lblAlert.setForeground(Color.red);
            lblAlert.setText(ex.getMessage());
            ex.printStackTrace();
        } catch (Exception ex) {
            //con.rollback();
            lblAlert.setText(ex.getMessage());
            ex.printStackTrace();
        }
        
        
        
//        try {
//            // TODO add your handling code here:
//            con.rollback();
//            lblAlert.setForeground(Color.red);
//            lblAlert.setText("File upload canceled");
//
//        } catch (SQLException ex) {
//            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
//        } finally {
//            //writer.close();
//
//            try {
//                con.close();
//                stmt.close();
//                stmt2.close();
//                stmt3.close();
//            } catch (SQLException ex) {
//                lblAlert.setForeground(Color.red);
//                lblAlert.setText(ex.getMessage());
//                ex.printStackTrace();
//            }
//        }
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void jFileChooser1ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jFileChooser1ComponentHidden
        
    }//GEN-LAST:event_jFileChooser1ComponentHidden

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel lblAlert;
    // End of variables declaration//GEN-END:variables

    private int get(int i) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
